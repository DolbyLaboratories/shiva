
-= GOT (For PLT and relocated global variables)

When building an executable runtime image for the loaded module we create
both a text and data segment. The very beginning of the data segment is
where the modules GOT is created. It is designed in such a way that a GOT
entry is created for both JUMP_SLOT and GLOB_DAT relocations. Infact they
can be interleaved within the same GOT.

I am bringing this to the attention of developers in-case they are confused
as to why we don't create both a .got and a .got.plt, one for shared library
functions, and the other for shared global data. It's simply not necessary,
our runtime image exists only in memory.

-- From shiva_module.c:bool calculate_data_size(struct shiva_module *linker)

...

        elf_relocation_iterator_init(&linker->elfobj, &rel_iter);
        while (elf_relocation_iterator_next(&rel_iter, &rel) == ELF_ITER_OK) {
                switch(rel.type) {
                case R_X86_64_PLT32:
                case R_X86_64_GOT64: // <- This relocation type is for Global data
                case R_X86_64_PLTOFF64:
                        /*
                         * Create room for the modules pltgot
                         */
                //      linker->data_size += sizeof(uint64_t);
                //      linker->pltgot_size += sizeof(uint64_t);
                        /*
                         * Cache symbol so we don't create duplicate GOT entries
                        */
                        e.key = (char *)rel.symname;
                        e.data = (char *)rel.symname;

                        /*
                         * If we already have this symbol then move on.
                         */
                        if (hsearch_r(e, FIND, &ep, &linker->cache.got) != 0)
                                continue;

                        got_entry = shiva_malloc(sizeof(*got_entry));
                        got_entry->symname = rel.symname; /* rel.symname will be valid until elf is unloaded */
                        got_entry->gotaddr = linker->data_vaddr + linker->pltgot_off + offset;
                        got_entry->gotoff = offset;

                        e.key = (char *)got_entry->symname;
                        e.data = got_entry;

                        if (hsearch_r(e, ENTER, &ep, &linker->cache.got) == 0) {
                                free(got_entry);
                                fprintf(stderr, "Failed to add symbol: '%s'\n",
                                    rel.symname);
                                return false;
                        }

                        shiva_debug("Inserting entries into GOT cache and GOT list\n");
                        TAILQ_INSERT_TAIL(&linker->tailq.got_list, got_entry, _linkage);
                        offset += sizeof(uint64_t);

                        linker->data_size += sizeof(uint64_t);
                        linker->pltgot_size += sizeof(uint64_t);
                        break;
                default:
                        break;
                }
        }


